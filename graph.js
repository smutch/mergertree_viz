// Generated by CoffeeScript 1.10.0
(function() {
  var diagonal, h, i, margin, nodeFillColor, nodeRadius, root, toggle, tree, update, vis, w;

  margin = [20, 120, 20, 120];

  w = 1280 - margin[1] - margin[3];

  h = 800 - margin[0] - margin[2];

  i = 0;

  root = void 0;

  nodeRadius = 4.5;

  nodeFillColor = function(d) {
    if (d._children) {
      if (d.GhostFlag) {
        return '#aaa';
      } else {
        return 'lightsteelblue';
      }
    } else {
      return '#fff';
    }
  };

  tree = d3.layout.tree().size([h, w]);

  diagonal = d3.svg.diagonal().projection(function(d) {
    return [d.x, d.y];
  });

  vis = d3.select('#body').append('svg:svg').attr('width', w + margin[1] + margin[3]).attr('height', h + margin[0] + margin[2]).append('svg:g').attr('transform', 'translate(' + margin[3] + ',' + margin[0] + ')');

  update = function(source) {
    var duration, link, node, nodeEnter, nodeExit, nodeUpdate, nodes;
    duration = d3.event && d3.event.altKey ? 5000 : 500;
    nodes = tree.nodes(root).reverse();
    this.maxDepth = 0;
    nodes.forEach((function(_this) {
      return function(d) {
        if (d.depth > _this.maxDepth) {
          return _this.maxDepth = d.depth;
        }
      };
    })(this));
    nodes.forEach(function(d) {
      d.y = d.depth * (h / this.maxDepth);
    });
    node = vis.selectAll('g.node').data(nodes, function(d) {
      return d.id || (d.id = ++i);
    });
    nodeEnter = node.enter().append('svg:g').attr('class', function(d) {
      var cls;
      cls = 'node type' + d.Type;
      if (d.GhostFlag) {
        cls += ' ghost';
      }
      return cls;
    }).attr('transform', function(d) {
      if (d.Type === 0) {
        return 'translate(' + source.x0 + ',' + source.y0 + ')';
      } else {
        return 'translate(' + (source.x0 - nodeRadius) + ',' + (source.y0 - nodeRadius) + ')';
      }
    }).on('click', function(d) {
      toggle(d);
      update(d);
    });
    nodeEnter.filter(function(d) {
      return d.Type === 0;
    }).append('svg:circle').attr('r', 1e-6).style('fill', nodeFillColor);
    nodeEnter.filter(function(d) {
      return d.Type > 0;
    }).append('svg:rect').attr('width', 1e-6).attr('height', 1e-6).style('fill', nodeFillColor);
    nodeUpdate = node.transition().duration(duration).attr('transform', function(d) {
      if (d.Type === 0) {
        return 'translate(' + d.x + ',' + d.y + ')';
      } else {
        return 'translate(' + (d.x - nodeRadius) + ',' + (d.y - nodeRadius) + ')';
      }
    });
    nodeUpdate.select('circle').attr('r', nodeRadius).style('fill', nodeFillColor);
    nodeUpdate.select('rect').attr('width', 2 * nodeRadius).attr('height', 2 * nodeRadius).style('fill', nodeFillColor);
    nodeUpdate.select('text').style('fill-opacity', 1);
    nodeExit = node.exit().transition().duration(duration).attr('transform', function(d) {
      return 'translate(' + source.x + ',' + source.y + ')';
    }).remove();
    nodeExit.select('circle').attr('r', 1e-6);
    nodeExit.select('rect').attr('width', 1e-6).attr('height', 1e-6);
    nodeExit.select('text').style('fill-opacity', 1e-6);
    link = vis.selectAll('path.link').data(tree.links(nodes), function(d) {
      return d.target.id;
    });
    link.enter().insert('svg:path', 'g').attr('class', 'link').attr('d', function(d) {
      var o;
      o = {
        x: source.x0,
        y: source.y0
      };
      return diagonal({
        source: o,
        target: o
      });
    }).transition().duration(duration).attr('d', diagonal);
    link.transition().duration(duration).attr('d', diagonal);
    link.exit().transition().duration(duration).attr('d', function(d) {
      var o;
      o = {
        x: source.x,
        y: source.y
      };
      return diagonal({
        source: o,
        target: o
      });
    }).remove();
    nodes.forEach(function(d) {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  };

  toggle = function(d) {
    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else {
      d.children = d._children;
      d._children = null;
    }
  };

  d3.json('data/tree_040044985.json', function(json) {
    var toggleAll;
    this.json = json;
    toggleAll = function(d) {
      if (d.children) {
        d.children.forEach(toggleAll);
        toggle(d);
      }
    };
    root = json;
    root.x0 = w / 2;
    root.y0 = 0;
    update(root);
  });

}).call(this);
